import { component$, useStore } from "@builder.io/qwik";

export const Pai = [
  {
    name: "1マンズ",
    binary:
      "110001 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "2マンズ",
    binary:
      "110010 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "3マンズ",
    binary:
      "110011 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "4マンズ",
    binary:
      "110100 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "5マンズ",
    binary:
      "110101 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "赤5マンズ",
    binary:
      "11101000 10110101 10100100 110101 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "6マンズ",
    binary:
      "110110 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "7マンズ",
    binary:
      "110111 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "8マンズ",
    binary:
      "111000 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "9マンズ",
    binary:
      "111001 11100011 10000011 10011110 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "1ピンズ",
    binary:
      "110001 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "2ピンズ",
    binary:
      "110010 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "3ピンズ",
    binary:
      "110011 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "4ピンズ",
    binary:
      "110100 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "5ピンズ",
    binary:
      "110101 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "赤5ピンズ",
    binary:
      "11101000 10110101 10100100 110101 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "6ピンズ",
    binary:
      "110110 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "7ピンズ",
    binary:
      "110111 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "8ピンズ",
    binary:
      "111000 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "9ピンズ",
    binary:
      "111001 11100011 10000011 10010100 11100011 10000011 10110011 11100011 10000010 10111010",
  },
  {
    name: "1ソーズ",
    binary:
      "110001 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "2ソーズ",
    binary:
      "110010 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "3ソーズ",
    binary:
      "110011 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "4ソーズ",
    binary:
      "110100 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "5ソーズ",
    binary:
      "110101 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "赤5ソーズ",
    binary:
      "11101000 10110101 10100100 110101 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "6ソーズ",
    binary:
      "110110 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "7ソーズ",
    binary:
      "110111 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "8ソーズ",
    binary:
      "111000 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "9ソーズ",
    binary:
      "111001 11100011 10000010 10111101 11100011 10000011 10111100 11100011 10000010 10111010",
  },
  {
    name: "白",
    binary: "11100011 10000011 10001111 11100011 10000010 10101111",
  },
  {
    name: "發",
    binary: "11100011 10000011 10001111 11100011 10000011 10000100",
  },
  {
    name: "中",
    binary:
      "11100011 10000011 10000001 11100011 10000011 10100101 11100011 10000011 10110011",
  },
  {
    name: "東",
    binary: "11100011 10000011 10001000 11100011 10000011 10110011",
  },
  {
    name: "南",
    binary: "11100011 10000011 10001010 11100011 10000011 10110011",
  },
  {
    name: "西",
    binary:
      "11100011 10000010 10110111 11100011 10000011 10100011 11100011 10000011 10111100",
  },
  {
    name: "北",
    binary: "11100011 10000011 10011010 11100011 10000010 10100100",
  },
];

export const Binary = component$(() => {
  const state = useStore({
    searchText: "",
    foundPai: null as { name: string; binary: string } | null,
    showError: false,
  });

  return (
    <div class="binary-container">
      <h2>7.バイナリ麻雀とは？</h2>
      <p>牌（パイ）と呼ばれる136枚のタイルをバイナリで表現しただけ。</p>
      <div class="search-section">
        <h2>牌検索</h2>
        <p>牌の名前を入力するとバイナリ表現を表示します</p>

        <div class="search-box">
          <input
            type="text"
            value={state.searchText}
            onInput$={(_, el) => {
              state.searchText = el.value;
            }}
            placeholder="例: 1マンズ、發など"
          />
          <button
            onClick$={() => {
              const found = Pai.find((p) => p.name === state.searchText);
              if (found) {
                state.foundPai = found;
                state.showError = false;
              } else {
                state.foundPai = null;
                state.showError = true;
              }
            }}
          >
            検索
          </button>
          <div class="result-box">
            {state.foundPai && (
              <div>
                <h4>{state.foundPai.name}</h4>
                <p>{state.foundPai.binary}</p>
              </div>
            )}
            {state.showError && (
              <div class="error-message">
                「{state.searchText}」という名前の牌は見つかりませんでした
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
});
